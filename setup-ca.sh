#! /bin/bash

# Hostname for certificates.  'localhost' is good for testing,
# especially if you are behind a NAT.  However, it won't allow access
# from a remote device.  In order for this to work, you'll need to set
# CAHOSTNAME to an actual DNS name that resolves to this host.  If
# everything is behind a NAT, the name can resolve to a local address.
: ${CAHOSTNAME:=$(hostname)}

# Setup the Certificate Authority and server certificates.  In
# general, this should be run once, to create these initial
# certificates, for development.

if [ -f certs/CA.crt -o -f certs/CA.key -o -f CADB.db \
	-o -f certs/SERVER.crt -o -f certs/SERVER.key ];
then
	echo "Server/CA certificates seem to already be present."
	exit 1
fi

mkdir -p certs

# Build the application.
go build -o liteboot || exit 1

# The certificate authority also requires a key to sign certificates,
# which can be generated by the app.
./liteboot cakey generate

# Extract the CA certificate as C strings for inclusion in the demo
# app.
sed 's/.*/"&\\r\\n"/' certs/CA.crt > certs/ca_crt.txt

# The CA key is not extracted, as the device should have no access to
# this.

# The HTTP server requires a private key for TLS.
openssl ecparam -name secp256r1 -genkey -out certs/SERVER.key

# Generate an X.509 certificate for use by the server.  The clients
# can verify this by having the CA.crt available, and use this to
# ensure we are talking to the right server.
openssl req -new -sha256 -key certs/SERVER.key \
	-out certs/SERVER.csr \
	-subj "/O=Linaro, LTD/CN=$CAHOSTNAME"

# Create a config snippet to add proper extensions to this key.
echo "subjectKeyIdentifier=hash" > exts$$.ext
echo "authorityKeyIdentifier=keyid,issuer" >> exts$$.ext
echo "basicConstraints = critical, CA:FALSE" >> exts$$.ext
echo "keyUsage = critical, digitalSignature" >> exts$$.ext
echo "extendedKeyUsage = serverAuth" >> exts$$.ext
echo "subjectAltName = DNS:$CAHOSTNAME" >> exts$$.ext

# Sign this with the CA.
openssl x509 -req -sha256 \
	-CA certs/CA.crt \
	-CAkey certs/CA.key \
	-days 3560 \
	-CAcreateserial \
	-CAserial certs/CA.srl \
	-in certs/SERVER.csr \
	-out certs/SERVER.crt \
	-extfile exts$$.ext

rm certs/SERVER.csr
rm exts$$.ext

# This certificate can be viewed with
# openssl x509 -in certs/SERVER.crt -noout -text

# **NOTE**: Certain values are hard-coded in `liteboot` when
# generating the CA certificate.  This utility may be extended to
# expose those values in the future, but at the moment the hard-coded
# values are sufficient for the proof-of-concept nature of this app.
